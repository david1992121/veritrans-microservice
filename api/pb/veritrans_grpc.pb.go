// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: veritrans.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VeritransClient is the client API for Veritrans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VeritransClient interface {
	GetMDKToken(ctx context.Context, in *GetMDKTokenRequest, opts ...grpc.CallOption) (*TokenReply, error)
	CreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	UpdateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	CreateCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	UpdateCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	DeleteCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	GetCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	Authorize(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentReply, error)
	Capture(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentReply, error)
	Cancel(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentReply, error)
}

type veritransClient struct {
	cc grpc.ClientConnInterface
}

func NewVeritransClient(cc grpc.ClientConnInterface) VeritransClient {
	return &veritransClient{cc}
}

func (c *veritransClient) GetMDKToken(ctx context.Context, in *GetMDKTokenRequest, opts ...grpc.CallOption) (*TokenReply, error) {
	out := new(TokenReply)
	err := c.cc.Invoke(ctx, "/Veritrans/GetMDKToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) CreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Veritrans/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) UpdateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Veritrans/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) CreateCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Veritrans/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) UpdateCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Veritrans/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) DeleteCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Veritrans/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) GetCard(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/Veritrans/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) Authorize(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentReply, error) {
	out := new(PaymentReply)
	err := c.cc.Invoke(ctx, "/Veritrans/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) Capture(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentReply, error) {
	out := new(PaymentReply)
	err := c.cc.Invoke(ctx, "/Veritrans/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veritransClient) Cancel(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentReply, error) {
	out := new(PaymentReply)
	err := c.cc.Invoke(ctx, "/Veritrans/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VeritransServer is the server API for Veritrans service.
// All implementations must embed UnimplementedVeritransServer
// for forward compatibility
type VeritransServer interface {
	GetMDKToken(context.Context, *GetMDKTokenRequest) (*TokenReply, error)
	CreateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	UpdateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	CreateCard(context.Context, *AccountRequest) (*AccountReply, error)
	UpdateCard(context.Context, *AccountRequest) (*AccountReply, error)
	DeleteCard(context.Context, *AccountRequest) (*AccountReply, error)
	GetCard(context.Context, *AccountRequest) (*AccountReply, error)
	Authorize(context.Context, *PaymentRequest) (*PaymentReply, error)
	Capture(context.Context, *PaymentRequest) (*PaymentReply, error)
	Cancel(context.Context, *PaymentRequest) (*PaymentReply, error)
	mustEmbedUnimplementedVeritransServer()
}

// UnimplementedVeritransServer must be embedded to have forward compatible implementations.
type UnimplementedVeritransServer struct {
}

func (UnimplementedVeritransServer) GetMDKToken(context.Context, *GetMDKTokenRequest) (*TokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMDKToken not implemented")
}
func (UnimplementedVeritransServer) CreateAccount(context.Context, *AccountRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedVeritransServer) UpdateAccount(context.Context, *AccountRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedVeritransServer) CreateCard(context.Context, *AccountRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedVeritransServer) UpdateCard(context.Context, *AccountRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedVeritransServer) DeleteCard(context.Context, *AccountRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedVeritransServer) GetCard(context.Context, *AccountRequest) (*AccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedVeritransServer) Authorize(context.Context, *PaymentRequest) (*PaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedVeritransServer) Capture(context.Context, *PaymentRequest) (*PaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedVeritransServer) Cancel(context.Context, *PaymentRequest) (*PaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedVeritransServer) mustEmbedUnimplementedVeritransServer() {}

// UnsafeVeritransServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VeritransServer will
// result in compilation errors.
type UnsafeVeritransServer interface {
	mustEmbedUnimplementedVeritransServer()
}

func RegisterVeritransServer(s grpc.ServiceRegistrar, srv VeritransServer) {
	s.RegisterService(&Veritrans_ServiceDesc, srv)
}

func _Veritrans_GetMDKToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMDKTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).GetMDKToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/GetMDKToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).GetMDKToken(ctx, req.(*GetMDKTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).CreateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).UpdateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).CreateCard(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).UpdateCard(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).DeleteCard(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).GetCard(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).Authorize(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).Capture(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veritrans_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeritransServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Veritrans/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeritransServer).Cancel(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Veritrans_ServiceDesc is the grpc.ServiceDesc for Veritrans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Veritrans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Veritrans",
	HandlerType: (*VeritransServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMDKToken",
			Handler:    _Veritrans_GetMDKToken_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Veritrans_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Veritrans_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _Veritrans_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _Veritrans_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Veritrans_DeleteCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _Veritrans_GetCard_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _Veritrans_Authorize_Handler,
		},
		{
			MethodName: "Capture",
			Handler:    _Veritrans_Capture_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Veritrans_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veritrans.proto",
}
